
SLF4j:
------

There are many good benefits in using slf4j library as your Java application logging API layer. You can think of slf4j as a Java interface, and then you would need an implementation -only one- at runtime to provide the actual logging details, such as writing to STDOUT or to a file. Each logging implementation -called binding- would obviously have their own way of configuring the log output, but your application will remain agnostic and always use the same `org.slf4j.Logger` API.


Using slf4j with Simple logger:
-------------------------------

Create a Maven based project and this in your pom.xml.

    <dependency>
        <groupId>org.slf4j</groupId>
        <artifactId>slf4j-api</artifactId>
        <version>1.7.5</version>
    </dependency>

Now you may use Logger in your Java code like this.

    package pck;
    import org.slf4j.*;
    public class Hello {
        static Logger LOGGER = LoggerFactory.getLogger(Hello.class);
        public static void main(String[] args) {
            for (int i = 0; i < 10; i++)
                if (i % 2 == 0)
                    LOGGER.info("Hello {}", i);
                else
                    LOGGER.debug("I am on index {}", i);
        }
    }

The above will get your program compiled, but when you run it, you will see these output:

    SLF4J: Failed to load class "org.slf4j.impl.StaticLoggerBinder".
    SLF4J: Defaulting to no-operation (NOP) logger implementation
    SLF4J: See http://www.slf4j.org/codes.html#StaticLoggerBinder for further details.

What it’s saying is that at runtime, you are missing the logging "implementation" (or the logger binding), so slf4j simply use a "NOP" implmentation, which does nothing. In order to see the output properly, you may try a simple implementation:

    <dependency>
        <groupId>org.slf4j</groupId>
        <artifactId>slf4j-simple</artifactId>
        <version>1.7.5</version>
    </dependency>


Class SimpleLogger:
-------------------

    java.lang.Object
        org.slf4j.helpers.MarkerIgnoringBase
            org.slf4j.impl.SimpleLogger 

All Implemented Interfaces: Serializable, Logger 
        
Simple implementation of Logger that sends all enabled log messages, for all defined loggers, to the console (System.err). The following system properties are supported to configure the behavior of this logger:

    org.slf4j.simpleLogger.logFile:
        The output target which can be the path to a file, or the special
        values "System.out" and "System.err". Default is "System.err".
        
    org.slf4j.simpleLogger.defaultLogLevel:
        Default log level for all instances of SimpleLogger. Must be one of
        ("trace", "debug", "info", "warn", or "error"). Default is "info".
        
    org.slf4j.simpleLogger.log.a.b.c:
        Logging detail level for a SimpleLogger instance named "a.b.c".
        Right-side value must be one of "trace", "debug", "info", "warn", or
        "error". When a SimpleLogger named "a.b.c" is initialized, its level
        is assigned from this property. If unspecified, the level of nearest
        parent logger will be used, and if none is set, then the value
        specified by `org.slf4j.simpleLogger.defaultLogLevel` will be used.
        
    org.slf4j.simpleLogger.showDateTime:
        Set to true if you want the current date and time to be included in
        output messages. Default is false.

    org.slf4j.simpleLogger.dateTimeFormat:
        The date and time format to be used in the output messages.
        The pattern describing the date and time format is defined by
        SimpleDateFormat. If the format is not specified or is invalid, the
        number of milliseconds since start up will be output.
        
    org.slf4j.simpleLogger.showThreadName:
        Set to true if you want to output the current thread name.
        Defaults to true.
        
    org.slf4j.simpleLogger.showLogName:
        Set to true if you want the Logger instance name to be included
        in output messages. Defaults to true.
        
    org.slf4j.simpleLogger.showShortLogName:
        Set to true if you want the last component of the name to be
        included in output messages. Defaults to false.
        
    org.slf4j.simpleLogger.levelInBrackets:
        Should the level string be output in brackets? Defaults to false.
        
    org.slf4j.simpleLogger.warnLevelString:
        The string value output for the warn level. Defaults to WARN.

In addition to looking for system properties with the names specified above, this implementation also checks for a class loader resource named "simplelogger.properties", and includes any matching definitions from this resource (if it exists).

With no configuration, the default output includes the relative time in milliseconds, thread name, the level, logger name, and the message followed by the line separator for the host. Sample output follows:

    176 [main] INFO examples.Sort - Populating an array of 2 elements in reverse order.
    225 [main] INFO examples.SortAlgo - Entered the sort method.
    304 [main] INFO examples.SortAlgo - Dump of integer array:
    317 [main] INFO examples.SortAlgo - Element [0] = 0
    331 [main] INFO examples.SortAlgo - Element [1] = 1
    343 [main] INFO examples.Sort - The next log statement should be an error message.
    346 [main] ERROR examples.SortAlgo - Tried to dump an uninitialized array.
      at org.log4j.examples.SortAlgo.dump(SortAlgo.java:58)
      at org.log4j.examples.Sort.main(Sort.java:64)
    467 [main] INFO  examples.Sort - Exiting main method.


Class SimpleDateFormat:
-----------------------

java.lang.Object
  extended by java.text.Format
      extended by java.text.DateFormat
          extended by java.text.SimpleDateFormat

All Implemented Interfaces: Serializable, Cloneable 
    
SimpleDateFormat is a concrete class for formatting and parsing dates in a locale-sensitive manner.

Date and time formats are specified by date and time pattern strings. Within date and time pattern strings, unquoted letters from 'A' to 'Z' and from 'a' to 'z' are interpreted as pattern letters representing the components of a date or time string.

Text can be quoted using single quotes (') to avoid interpretation. "''" represents a single quote. All other characters are not interpreted; they're simply copied into the output string during formatting or matched against the input string during parsing.

The following pattern letters are defined (all other characters from 'A' to 'Z' and from 'a' to 'z' are reserved):

    Letter  Date or Time Component     Presentation       Examples
    G       Era designator             Text               AD
    y       Year                       Year               1996; 96
    M       Month in year              Month              July; Jul; 07
    w       Week in year               Number             27
    W       Week in month              Number             2
    D       Day in year                Number             189
    d       Day in month               Number             10
    F       Day of week in month       Number             2
    E       Day in week                Text               Tuesday; Tue
    a       Am/pm marker               Text               PM
    H       Hour in day (0-23)         Number             0
    k       Hour in day (1-24)         Number             24
    K       Hour in am/pm (0-11)       Number             0
    h       Hour in am/pm (1-12)       Number             12
    m       Minute in hour             Number             30
    s       Second in minute           Number             55
    S       Millisecond                Number             978
    z       Time zone                  General time zone  Pacific Standard Time; PST; GMT-08:00

    
The following examples show how date and time patterns are interpreted in the U.S. locale. The given date and time are 2001-07-04 12:08:56 local time in the U.S. Pacific Time time zone. 
 
    Date and Time Pattern              Result
    "yyyy.MM.dd G 'at' HH:mm:ss z"     2001.07.04 AD at 12:08:56 PDT
    "EEE, MMM d, ''yy"                 Wed, Jul 4, '01
    "h:mm a"                           12:08 PM
    "hh 'o''clock' a, zzzz"            12 o'clock PM, Pacific Daylight Time
    "K:mm a, z"                        0:08 PM, PDT
    "yyyyy.MMMMM.dd GGG hh:mm aaa"     02001.July.04 AD 12:08 PM
    "EEE, d MMM yyyy HH:mm:ss Z"       Wed, 4 Jul 2001 12:08:56 -0700
    "yyMMddHHmmssZ"                    010704120856-0700
    "yyyy-MM-dd'T'HH:mm:ss.SSSZ"       2001-07-04T12:08:56.235-0700

