SimpleSwitchMorph subclass: #CGOLBoardCell	instanceVariableNames: 'region'	classVariableNames: ''	poolDictionaries: ''	category: 'CGOL-ConwayGame'!!CGOLBoardCell commentStamp: 'srlm 3/5/2016 19:55' prior: 0!Board cell for a CGOLBoard.!!CGOLBoardCell methodsFor: 'accessing' stamp: 'sebas 10/6/2015 01:52'!region: aRegion	region := aRegion.	region addListener: self.! !!CGOLBoardCell methodsFor: 'accessing' stamp: 'sebas 10/6/2015 01:50'!region	^ region! !!CGOLBoardCell methodsFor: 'as yet unclassified' stamp: 'sebas 10/6/2015 04:16'!initialize 	super initialize. 	self label: ''.	self borderWidth: 2. 	bounds := 0@0 corner: 16@16. 	offColor := Color paleYellow. 	onColor := Color paleBlue darker. 	self useSquareCorners. 	self turnOn! !!CGOLBoardCell methodsFor: 'as yet unclassified' stamp: 'sebas 10/6/2015 01:48'!update	region substance accept: self.! !!CGOLBoardCell methodsFor: 'as yet unclassified' stamp: 'sebas 10/6/2015 04:16'!onOrganism	self turnOff! !!CGOLBoardCell methodsFor: 'as yet unclassified' stamp: 'sebas 10/6/2015 01:49'!mouseUp: anEvent    self region toggle.! !!CGOLBoardCell methodsFor: 'as yet unclassified' stamp: 'sebas 10/6/2015 01:53'!regionChange: aRegion	self update.! !!CGOLBoardCell methodsFor: 'as yet unclassified' stamp: 'sebas 10/6/2015 04:16'!onDeadMatter	self turnOn! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!CGOLBoardCell class	instanceVariableNames: ''!!CGOLBoardCell class methodsFor: 'as yet unclassified' stamp: 'sebas 10/6/2015 02:32'!new: aRegion	^self new		region: aRegion;		update;		yourself.! !Object subclass: #CGOLRegion	instanceVariableNames: 'location substance surface listeners'	classVariableNames: ''	poolDictionaries: ''	category: 'CGOL-ConwayGame'!!CGOLRegion commentStamp: '<historical>' prior: 0!A CGOLRegion is a subdivision of a CGOLWorld.Instance Variables	location:		two-dimensional position of the region	substance:		contents residing in the region!!CGOLRegion methodsFor: 'as yet unclassified' stamp: 'sebas 10/5/2015 22:26'!location: coordinate	location := coordinate! !!CGOLRegion methodsFor: 'as yet unclassified' stamp: 'sebas 10/5/2015 22:27'!surface: value	surface := value! !!CGOLRegion methodsFor: 'as yet unclassified' stamp: 'sebas 10/6/2015 02:10'!initialize	super initialize.	listeners := Bag new.! !!CGOLRegion methodsFor: 'as yet unclassified' stamp: 'sebas 10/5/2015 22:27'!surface	^ surface! !!CGOLRegion methodsFor: 'as yet unclassified' stamp: 'sebas 10/6/2015 01:41'!addListener: anObject	listeners add: anObject.! !!CGOLRegion methodsFor: 'as yet unclassified' stamp: 'sebas 10/5/2015 22:29'!toggle	self substance: (substance overturn)! !!CGOLRegion methodsFor: 'as yet unclassified' stamp: 'sebas 10/6/2015 04:29'!randomize	self substance: (Array with:  (CGOLOrganicMatter instance) with: (CGOLOrganism instance)) atRandom! !!CGOLRegion methodsFor: 'as yet unclassified' stamp: 'sebas 10/5/2015 22:26'!location	^ location! !!CGOLRegion methodsFor: 'as yet unclassified' stamp: 'sebas 10/5/2015 23:39'!neighbors	^ self surface neighborsOf: self! !!CGOLRegion methodsFor: 'as yet unclassified' stamp: 'sebas 10/6/2015 02:02'!substance: value	substance := value.	listeners do: [ :l | l regionChange: self ].! !!CGOLRegion methodsFor: 'as yet unclassified' stamp: 'sebas 10/5/2015 22:27'!substance	^ substance! !!CGOLRegion methodsFor: 'as yet unclassified' stamp: 'sebas 10/5/2015 23:27'!hasLife	^ self substance isAlive! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!CGOLRegion class	instanceVariableNames: ''!!CGOLRegion class methodsFor: 'as yet unclassified' stamp: 'sebas 10/6/2015 02:19'!in: coordinate of: aSurface	^ self new location: coordinate;		surface: aSurface;		substance: CGOLOrganicMatter instance;		yourself! !Object subclass: #CGOLWorld	instanceVariableNames: 'age surface'	classVariableNames: ''	poolDictionaries: ''	category: 'CGOL-ConwayGame'!!CGOLWorld commentStamp: '<historical>' prior: 0!A CGOLWorld represents a world capable of evolving by applying changes to itself.!!CGOLWorld methodsFor: 'as yet unclassified' stamp: 'sebas 10/6/2015 00:17'!evolveApplying: changes	age := age + 1.	changes do: [ :c | c value ].	! !!CGOLWorld methodsFor: 'accessing' stamp: 'sebas 10/6/2015 00:43'!age: value	age := value! !!CGOLWorld methodsFor: 'accessing' stamp: 'sebas 10/3/2015 19:34'!age	^ age! !!CGOLWorld methodsFor: 'accessing' stamp: 'sebas 10/6/2015 00:32'!surface	^ surface! !!CGOLWorld methodsFor: 'accessing' stamp: 'sebas 10/6/2015 04:28'!randomize	surface randomize! !!CGOLWorld methodsFor: 'accessing' stamp: 'sebas 10/6/2015 00:32'!surface: aSurface	surface := aSurface! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!CGOLWorld class	instanceVariableNames: ''!!CGOLWorld class methodsFor: 'as yet unclassified' stamp: 'sebas 10/6/2015 00:33'!with: aSurface	^self new age: 0; surface: aSurface; yourself! !Object subclass: #CGOLEvolveRule	instanceVariableNames: 'toBorn toStay'	classVariableNames: ''	poolDictionaries: ''	category: 'CGOL-ConwayGame'!!CGOLEvolveRule commentStamp: '<historical>' prior: 0!A CGOLEvolveRule describes the way a CGOLRegion is to be modified according to its adjacent regions.!!CGOLEvolveRule methodsFor: 'accessing' stamp: 'sebas 10/6/2015 00:37'!toStay: value	toStay := value! !!CGOLEvolveRule methodsFor: 'accessing' stamp: 'sebas 10/6/2015 00:37'!toBorn: value	toBorn := value! !!CGOLEvolveRule methodsFor: 'accessing' stamp: 'sebas 10/3/2015 20:32'!toStay	^ toStay! !!CGOLEvolveRule methodsFor: 'accessing' stamp: 'sebas 10/3/2015 20:31'!toBorn	^ toBorn! !!CGOLEvolveRule methodsFor: 'as yet unclassified' stamp: 'sebas 10/6/2015 01:01'!onDeadMatter	^ [:live :region |		[ self toBorn detect: [:c | c = live] ifFound: [region toggle] ]	]! !!CGOLEvolveRule methodsFor: 'as yet unclassified' stamp: 'sebas 10/6/2015 01:01'!onOrganism	^ [:live :region |		[ self toStay detect: [:c | c = live] ifNone: [region toggle] ]	]! !!CGOLEvolveRule methodsFor: 'as yet unclassified' stamp: 'sebas 10/6/2015 00:11'!applyTo: aRegion	| liveCells |	liveCells :=  aRegion neighbors count: [ :n | n hasLife ].	^ (aRegion substance accept: self) value: liveCells value: aRegion.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!CGOLEvolveRule class	instanceVariableNames: ''!!CGOLEvolveRule class methodsFor: 'as yet unclassified' stamp: 'sebas 10/3/2015 20:31'!toBorn: aListOfNumbers toStay: otherListOfNumbers	^self new toBorn: aListOfNumbers; toStay: otherListOfNumbers; yourself ! !BorderedMorph subclass: #CGOLBoard	instanceVariableNames: 'conwayWorld cells'	classVariableNames: ''	poolDictionaries: ''	category: 'CGOL-ConwayGame'!!CGOLBoard commentStamp: 'srlm 3/5/2016 19:54' prior: 0!Board game for a CGOLGame.!!CGOLBoard methodsFor: 'accessing' stamp: 'sebas 10/6/2015 01:06'!conwayWorld	^ conwayWorld! !!CGOLBoard methodsFor: 'accessing' stamp: 'sebas 10/6/2015 04:28'!conwayWorld: aWorld	conwayWorld := aWorld! !!CGOLBoard methodsFor: 'accessing' stamp: 'sebas 10/6/2015 03:06'!newCellAt: i at: j  	| c origin | 	c := CGOLBoardCell  new: (conwayWorld surface regionInX: i inY: j). 	origin := self innerBounds origin. 	self addMorph: c. 	c position: ((i - 1) * c width) @ ((j - 1) * c height) + origin.	^c.! !!CGOLBoard methodsFor: 'accessing' stamp: 'sebas 10/6/2015 04:28'!cells: aMatrixOfCells	cells := aMatrixOfCells! !!CGOLBoard methodsFor: 'accessing' stamp: 'sebas 10/6/2015 01:06'!cells	^ cells! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!CGOLBoard class	instanceVariableNames: ''!!CGOLBoard class methodsFor: 'as yet unclassified' stamp: 'ConwayGoL 10/6/2015 09:09'!new: aWorld	| sampleCell width height board | 	sampleCell := CGOLBoardCell new. 	width := sampleCell width * aWorld surface width . 	height := sampleCell height * aWorld surface height. 	board := self new.	^board 		bounds: (5@5 extent: (height@width * board borderWidth));		conwayWorld: aWorld;		cells: (Matrix rows: (aWorld surface height) columns: (aWorld surface width) tabulate: [ :i :j | board newCellAt: i at: j ]);		yourself.! !Object subclass: #CGOLCoordinate	instanceVariableNames: 'axisX axisY'	classVariableNames: ''	poolDictionaries: ''	category: 'CGOL-ConwayGame'!!CGOLCoordinate commentStamp: '<historical>' prior: 0!A CGOLCoordinate represents the position of a CGOLRegion.!!CGOLCoordinate methodsFor: 'as yet unclassified' stamp: 'sebas 10/5/2015 22:34'!axisX	^ axisX! !!CGOLCoordinate methodsFor: 'as yet unclassified' stamp: 'sebas 10/5/2015 22:21'!axisY: value	axisY := value! !!CGOLCoordinate methodsFor: 'as yet unclassified' stamp: 'sebas 10/5/2015 22:21'!axisX: value	axisX := value! !!CGOLCoordinate methodsFor: 'as yet unclassified' stamp: 'sebas 10/5/2015 22:21'!axisY	^ axisY! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!CGOLCoordinate class	instanceVariableNames: ''!!CGOLCoordinate class methodsFor: 'as yet unclassified' stamp: 'sebas 10/5/2015 22:34'!inX: x inY: y	^ self new axisX: x; axisY: y; yourself! !Object subclass: #CGOLNaturalSelection	instanceVariableNames: 'evolveRule'	classVariableNames: ''	poolDictionaries: ''	category: 'CGOL-ConwayGame'!!CGOLNaturalSelection commentStamp: '<historical>' prior: 0!A CGOLNaturalSelection evolves a CGOLWorld by first computing the changes to be made onto it and then applying them.!!CGOLNaturalSelection methodsFor: 'as yet unclassified' stamp: 'sebas 10/6/2015 00:36'!evolve: aWorld	| changes |	changes := LinkedList new.	aWorld surface do: [ :region |		changes add: (self evolveRule applyTo: region)	].	aWorld evolveApplying: changes! !!CGOLNaturalSelection methodsFor: 'accessing' stamp: 'sebas 10/3/2015 19:49'!evolveRule	^ evolveRule! !!CGOLNaturalSelection methodsFor: 'accessing' stamp: 'sebas 10/6/2015 00:34'!evolveRule: value	evolveRule := value! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!CGOLNaturalSelection class	instanceVariableNames: ''!!CGOLNaturalSelection class methodsFor: 'as yet unclassified' stamp: 'sebas 10/6/2015 00:34'!newUsing: anEvolveRule	^self new evolveRule: anEvolveRule; yourself! !Object subclass: #CGOLSubstance	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'CGOL-ConwayGame'!!CGOLSubstance commentStamp: '<historical>' prior: 0!A CGOLOrganism is a kind of substance which resides in a CGOLRegion. It is implemented as a Singeton. It has two subclasses: - CGOLOrganicMatter- CGOLOrganism!!CGOLSubstance methodsFor: 'as yet unclassified' stamp: 'sebas 10/5/2015 22:15'!overturn	self subclassResponsibility! !!CGOLSubstance methodsFor: 'as yet unclassified' stamp: 'sebas 10/5/2015 22:15'!isAlive	self subclassResponsibility! !!CGOLSubstance methodsFor: 'as yet unclassified' stamp: 'sebas 10/5/2015 23:57'!accept: aVisitor	self subclassResponsibility! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!CGOLSubstance class	instanceVariableNames: 'Instance'!!CGOLSubstance class methodsFor: 'accessing' stamp: 'sebas 10/6/2015 02:26'!instance	Instance ifNil: [ self initialize  ].	^ Instance! !!CGOLSubstance class methodsFor: 'class initialization' stamp: 'sebas 10/6/2015 02:26'!initialize	"CGOLSubstance"	Instance := self createInstance! !!CGOLSubstance class methodsFor: 'class initialization' stamp: 'sebas 10/5/2015 22:08'!createInstance	"CGOLSubstance"	^ self new! !BorderedMorph subclass: #CGOLGame	instanceVariableNames: 'board naturalSelection speed'	classVariableNames: ''	poolDictionaries: ''	category: 'CGOL-ConwayGame'!!CGOLGame commentStamp: 'srlm 3/5/2016 19:56' prior: 0!Conway's game of life game UI. You can play it for example by executing:(CGOLGame ofWidth:30 andHeight: 15) play.!!CGOLGame methodsFor: 'accessing' stamp: 'sebas 10/6/2015 03:32'!drawButton: aLabel toDo: anAction at: aPosition	| button |		button := SimpleButtonMorph newWithLabel: aLabel.	button target: self; actionSelector: anAction.	self addMorph: button.	button position: aPosition.	^button	! !!CGOLGame methodsFor: 'accessing' stamp: 'ConwayGoL 10/6/2015 09:22'!drawObjects	| button width|	width  := 0.	width := width + (self drawButton: 'Play' toDo: #startStepping at: (0@0)) width.	width := width + (self drawButton: 'Stop' toDo: #stopStepping at: (width@0)) width.	width := width + (self drawButton: 'Speed Up' toDo: #speedUp at: (width@0)) width.	width := width + (self drawButton: 'Speed Down' toDo: #speedDown at: (width@0)) width.	button := (self drawButton: 'Random' toDo: #randomize at: (width@0)).	board position: (0@(button height)).	self addMorph: board! !!CGOLGame methodsFor: 'accessing' stamp: 'sebas 10/6/2015 03:52'!speedDown	speed := speed * 2.! !!CGOLGame methodsFor: 'accessing' stamp: 'sebas 10/6/2015 03:02'!naturalSelection: anObject	naturalSelection := anObject! !!CGOLGame methodsFor: 'accessing' stamp: 'sebas 10/6/2015 03:49'!initialize	super initialize.	speed := 1000.! !!CGOLGame methodsFor: 'accessing' stamp: 'sebas 10/6/2015 03:52'!speedUp	speed := speed / 2.! !!CGOLGame methodsFor: 'accessing' stamp: 'sebas 10/6/2015 03:02'!naturalSelection	^ naturalSelection! !!CGOLGame methodsFor: 'accessing' stamp: 'ConwayGoL 10/6/2015 09:23'!play	self openInWindow; stopStepping! !!CGOLGame methodsFor: 'accessing' stamp: 'sebas 10/6/2015 04:27'!randomize	board conwayWorld randomize.! !!CGOLGame methodsFor: 'accessing' stamp: 'sebas 10/6/2015 03:20'!step	naturalSelection evolve: (board conwayWorld).! !!CGOLGame methodsFor: 'accessing' stamp: 'sebas 10/6/2015 03:49'!stepTime	^speed! !!CGOLGame methodsFor: 'accessing' stamp: 'sebas 10/6/2015 04:27'!board: aBoard	board := aBoard! !!CGOLGame methodsFor: 'accessing' stamp: 'sebas 10/6/2015 03:01'!board	^ board! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!CGOLGame class	instanceVariableNames: ''!!CGOLGame class methodsFor: 'as yet unclassified' stamp: 'sebas 10/6/2015 03:21'!ofWidth: width andHeight: height	| world rule|	world := CGOLWorld with: (CGOLWorldSurface ofWidth: width andHeight: height).		rule := CGOLEvolveRule toBorn: #(3) toStay: #(2 3).	^self new		naturalSelection: (CGOLNaturalSelection newUsing: rule);		board: (CGOLBoard new: world);		drawObjects;		yourself.! !Object subclass: #CGOLWorldSurface	instanceVariableNames: 'regions'	classVariableNames: ''	poolDictionaries: ''	category: 'CGOL-ConwayGame'!!CGOLWorldSurface commentStamp: '<historical>' prior: 0!A CGOLWorldSurface represents the surface part of a CGOLWorld. It consists of a group of regions with a two-dimensional disposition.!!CGOLWorldSurface methodsFor: 'as yet unclassified' stamp: 'sebas 10/6/2015 00:55'!neighborsOf: aRegion	| x y neighbors|	x := aRegion location axisX.	y := aRegion location axisY.	neighbors := regions atRows: (x - 1) to: (x + 1) columns: (y - 1) to: (y + 1) ifInvalid: aRegion.	^ neighbors asArray reject: [:e | e = aRegion ]! !!CGOLWorldSurface methodsFor: 'as yet unclassified' stamp: 'sebas 10/5/2015 22:30'!regions	 ^ regions! !!CGOLWorldSurface methodsFor: 'as yet unclassified' stamp: 'sebas 10/5/2015 22:30'!regions: matrix	 regions := matrix! !!CGOLWorldSurface methodsFor: 'as yet unclassified' stamp: 'sebas 10/5/2015 23:23'!regionInX: x inY: y	^ regions at: x at: y! !!CGOLWorldSurface methodsFor: 'as yet unclassified' stamp: 'sebas 10/6/2015 04:28'!randomize	regions do: [ :r | r randomize ].! !!CGOLWorldSurface methodsFor: 'as yet unclassified' stamp: 'sebas 10/5/2015 23:21'!width	^ regions columnCount! !!CGOLWorldSurface methodsFor: 'as yet unclassified' stamp: 'sebas 10/5/2015 23:20'!do: aBlock	regions do: aBlock! !!CGOLWorldSurface methodsFor: 'as yet unclassified' stamp: 'sebas 10/5/2015 23:21'!height	^ regions rowCount! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!CGOLWorldSurface class	instanceVariableNames: ''!!CGOLWorldSurface class methodsFor: 'as yet unclassified' stamp: 'sebas 10/5/2015 23:17'!ofWidth: width andHeight: height	| surface |	surface := self new.	surface regions: (Matrix rows: width columns: height tabulate: [:r :c|		CGOLRegion in: (CGOLCoordinate inX: r inY: c) of: surface	]).	^ surface! !CGOLSubstance subclass: #CGOLOrganicMatter	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'CGOL-ConwayGame'!!CGOLOrganicMatter commentStamp: '<historical>' prior: 0!Subclass of CGOLSubstance.It represents absence of life in a CGOLRegion.!!CGOLOrganicMatter methodsFor: 'as yet unclassified' stamp: 'sebas 10/5/2015 22:15'!overturn	^ CGOLOrganism instance! !!CGOLOrganicMatter methodsFor: 'as yet unclassified' stamp: 'sebas 10/5/2015 22:14'!isAlive	^ false! !!CGOLOrganicMatter methodsFor: 'as yet unclassified' stamp: 'sebas 10/6/2015 00:04'!accept: aVisitor	^ aVisitor onDeadMatter! !CGOLSubstance subclass: #CGOLOrganism	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'CGOL-ConwayGame'!!CGOLOrganism commentStamp: '<historical>' prior: 0!Subclass of CGOLSubstance.It represents life in a CGOLRegion.!!CGOLOrganism methodsFor: 'as yet unclassified' stamp: 'sebas 10/5/2015 22:16'!overturn	^ CGOLOrganicMatter instance! !!CGOLOrganism methodsFor: 'as yet unclassified' stamp: 'sebas 10/5/2015 22:14'!isAlive	^ true! !!CGOLOrganism methodsFor: 'as yet unclassified' stamp: 'sebas 10/6/2015 00:04'!accept: aVisitor	^ aVisitor onOrganism! !CGOLSubstance initialize!